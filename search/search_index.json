{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CIM Emoji and text A simple library that can be used to find both emojis and words within a document. It is an ongoing development so likely to change. The methods are being developed. Contributions The code is open to being pull requests or bugs,issues,features being raised on the issue queue. If you have a pull request for a new feature, please do add tests and documentation to support it.","title":"Home"},{"location":"#cim-emoji-and-text","text":"A simple library that can be used to find both emojis and words within a document. It is an ongoing development so likely to change. The methods are being developed.","title":"CIM Emoji and text"},{"location":"#contributions","text":"The code is open to being pull requests or bugs,issues,features being raised on the issue queue. If you have a pull request for a new feature, please do add tests and documentation to support it.","title":"Contributions"},{"location":"methods/","text":"Sample Methods Each example assumes that you have import the CIMEmoji library from cim_emoji import CIMEmoji as cim Find Emojis A simple search for emojis within a string test_string = 'We \ud83d\ude0a want \ud83d\ude05 to emojis ' emojis = cim().find_all_emoji (test_string) Emojis should present a dictionary along the lines of: {'\ud83d\ude05': 'grinning face with sweat', '\ud83d\ude0a': 'smiling face with smiling eyes'} Collocations with Emojis find_emoji_collocation() has a parameter called direction. This is set to \"after\" but can be set to \"before\" to search before the emoji find_emoji_collocation(test_string, '\ud83d\ude0a', direction=\"before\") . Please note: very much in development Building on the concept of collocations in digital methods. test_string = 'We \ud83d\ude0a want \ud83d\ude05 to \ud83d\ude0f extract \ud83d\ude01 these \ud83d\ude00 emojis ' pos = cim().find_emoji_collocation(test_string, '\ud83d\ude0a') would return a list of words, such as [\"want\"] or if the direction parameter is set to before [\"We\"] Historical Emojis Please note: very much in development While the code focuses on the current dataset, it is possible to override this to get earlier ones. The list of them is at https://unicode.org/Public/emoji/. version=16.0 download(version) This will replace the existing codes for use within the library.","title":"Sample Methods"},{"location":"methods/#sample-methods","text":"Each example assumes that you have import the CIMEmoji library from cim_emoji import CIMEmoji as cim","title":"Sample Methods"},{"location":"methods/#find-emojis","text":"A simple search for emojis within a string test_string = 'We \ud83d\ude0a want \ud83d\ude05 to emojis ' emojis = cim().find_all_emoji (test_string) Emojis should present a dictionary along the lines of: {'\ud83d\ude05': 'grinning face with sweat', '\ud83d\ude0a': 'smiling face with smiling eyes'}","title":"Find Emojis"},{"location":"methods/#collocations-with-emojis","text":"find_emoji_collocation() has a parameter called direction. This is set to \"after\" but can be set to \"before\" to search before the emoji find_emoji_collocation(test_string, '\ud83d\ude0a', direction=\"before\") .","title":"Collocations with Emojis"},{"location":"methods/#please-note-very-much-in-development","text":"Building on the concept of collocations in digital methods. test_string = 'We \ud83d\ude0a want \ud83d\ude05 to \ud83d\ude0f extract \ud83d\ude01 these \ud83d\ude00 emojis ' pos = cim().find_emoji_collocation(test_string, '\ud83d\ude0a') would return a list of words, such as [\"want\"] or if the direction parameter is set to before [\"We\"]","title":"Please note: very much in development"},{"location":"methods/#historical-emojis","text":"","title":"Historical Emojis"},{"location":"methods/#please-note-very-much-in-development_1","text":"While the code focuses on the current dataset, it is possible to override this to get earlier ones. The list of them is at https://unicode.org/Public/emoji/. version=16.0 download(version) This will replace the existing codes for use within the library.","title":"Please note: very much in development"}]}